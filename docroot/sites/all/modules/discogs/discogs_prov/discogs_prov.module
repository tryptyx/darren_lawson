<?php
/**
 * @file
 * This module provides a Discography Provider Adapter for the Discogs.com
 * web site.
 */

/**
 * Implements hook_help().
 */
function discogs_prov_help($path, $arg) {
  switch ($path) {
    case 'admin/help#discogs_prov':
      return '<h3>' . t('About') . '</h3>'
        . '<p>'  . t('This module is the Discography Provider Adapter for the Discogs.com API. Its job is to query the Discogs.com API, and return properly-formatted data to the Discography Mediator.') . '</p>'
        . '<p>'  . t('For more information, see the <a href="!url">online documentation</a> for the Discography Framework.', array('!url' => 'https://drupal.org/node/2031953')) . '</p>'
        . '<h3>' . t('Uses') . '</h3>'
        . '<p>'  . t('This module implements hooks that are called by the Discography Mediator. Visit the <a href="@link">help page for the Discography Mediator</a> for details.', array('@link' => url('admin/help/discog_mediator')))
        . '</p>';
  }
}

/**
 * Implements hook_theme().
 */
function discogs_prov_theme() {
  return array(
    // Theme functions created in this module
    'discogs_mult_artist' => array(
      'variables' => array(),
      'function' => 'theme_discogs_mult_artist',
    ),
    'discogs_check_name' => array(
      'variables' => array(
        'name' => NULL,
      ),
      'function' => 'theme_discogs_check_name',
    ),
  );
}

/**
 * Implements hook_discog_provider_info().
 */
function discogs_prov_discog_provider_info() {
  // Create common search filters
  $filter = array(
    'release' => 'Releases',
    'artist' => 'Artists',
    'label' => 'Labels',
    'master' => 'Master Releases',
  );
  return array(
    'name' => 'Discogs.com',
    'description' => 'Search and import releases from Discogs.com',
    'search_types' => array(
      'release' => 'Releases',
      'artist' => 'Artists',
      'label' => 'Labels',
    ),
    'returns_releases' => array('release'),
    // TODO implement more search options
    'search_filters' => array(),
  );
}

/**
 * Implements hook_discog_search().
 *
 * This function handles the initial search, submitted from the first step of
 * the import form.
 *
 * The return type should be an array, with these keys:
 * - total_results [REQUIRED]: The total number of results, as an integer
 * - results [REQUIRED] - An array containing these keys:
 *   - id [REQUIRED]: The ID of the result (e.g. artist ID or label ID)
 *   - title [REQUIRED]: The title of the result (e.g. artist or label name)
 *   - thumb_url: link to thumbnail image on provider's website
 *   - provider_url: link to result on provider's website
 *   - release_artist: release artist (if returning releases)
 *   - release_format: release format (if returning releases)
 *   - release_label: record label (if returning releases)
 *   - release_catno: catalog number (if returning releases)
 *   If you include any other fields, you must override:
 *     theme_discog_option_text()
 */
function discogs_prov_discog_search($term, $type, $filter, $per_page, $offset) {
  // Define and initialize variables
  $data       = array();
  $json       = array();
  $query_data = array();
  $url        = 'http://api.discogs.com/database/search';

  // NEW If the term is numeric, assume that it is a release ID
  if (is_numeric($term)) {
    $release = discogs_prov_discog_fetch_release($term);
    if (!empty($release['title'])) {
      $release['id'] = $term;
      $data['total_results'] = 1;
      $data['results'][0] = $release;
      return $data;
    }
  }

  // Calculate page - Discogs.com uses 1-indexed pages, not an offset.
  $page = ($offset / $per_page) + 1;

  // Build the query data array
  $query_data = array(
    'q'        => $term,
    'type'     => $type,
    'page'     => $page,
    'per_page' => $per_page,
  );

  // Send the API request via HTTP using helper function
  $json = _discogs_prov_http_request($url, $query_data);
  // Parse it using helper function
  $data = _discogs_prov_common($json);

  // We don't need to add any other fields to $data
  return $data;
}

/**
 * Implements hook_discog_fetch_releases().
 *
 * This function handles a search of a particular artist, label, etc. for
 * their releases.
 *
 * The return type should be an array, with these keys:
 * - total_results [REQUIRED]: The total number of results, as an integer
 * - info: An array of information about this particular artist, label, etc. to
 *   be displayed before the releases returned. If you decide to include it,
 *   these keys are supported by the default theme:
 *   - name
 *   - description
 *   If you include any other fields, you must override:
 *     theme_discog_info_text()
 * - results [REQUIRED]: An array containing these keys:
 *   - id [REQUIRED]: The ID of the result (e.g. artist ID or label ID)
 *   - title [REQUIRED]: The title of the result (e.g. artist or label name)
 *   - thumb_url: link to thumbnail image on provider's website
 *   - provider_url: link to result on provider's website
 *   - release_artist: release artist
 *   - release_format: release format
 *   - release_label: record label
 *   - release_catno: catalog number
 *   If you include any other fields, you must override:
 *     theme_discog_option_text()
 */
function discogs_prov_discog_fetch_releases($type, $id, $per_page, $offset) {
  // Define and initialize variables
  $data       = array();
  $json       = array();
  $query_data = array();
  $url        = 'http://api.discogs.com/';

  // Calculate page - Discogs.com uses 1-indexed pages, not an offset.
  $page = ($offset / $per_page) + 1;

  // Build the URL
  $url .= $type . 's/' . $id . '/releases';

  // Build the query data array
  $query_data = array(
    'per_page' => $per_page,
    'page'     => $page,
  );
  // Send the API request via HTTP using helper function
  $json = _discogs_prov_http_request($url, $query_data);

  // Parse it using helper function
  $data = _discogs_prov_common($json, 'releases');

  /* The Discography Mediator form can display information before the list of
   * releases. Let's add that now, by querying Discogs for the info.
   * TODO: What about Discogs.com's one-query-per-second rule??
   */
  $url = 'http://api.discogs.com/' . $type . 's/' . $id;
  $json = _discogs_prov_http_request($url);

  if (isset($json['name'])) {
    // Clean up the artist name for the info page
    $data['info']['name'] = theme('discogs_check_name',
        array('name' => $json['name']));
  }
  if (isset($json['profile'])) {
    $data['info']['description'] = $json['profile'];
  }
  if (isset($json['uri'])) {
    $data['info']['provider_url'] = $json['uri'];
  }
  if (isset($json['images'])) {
    // Use helper function to select primary image
    $imgs = _discogs_prov_images($json['images']);
    if (isset($imgs['primary']) && !empty($imgs['image_urls'])) {
      $data['info']['image_url'] = $imgs['image_urls'][$imgs['primary']];
    }
  }

  return $data;
}

/**
 * Implements hook_discog_fetch_release().
 *
 * This function handles the retrieval  of a particular release.
 *
 * The returned array should have the following fields:
 * - provider_id: the ID of the release on the provider's website. Currently,
 *   this is completely unused, but other modules may find it useful.
 * - title [REQUIRED]: plain text (named for consistency with node title)
 * - release_artist [REQUIRED]: plain text
 * - release_label: plain text
 * - release_catno (catalog #): plain text
 * - release_format: plain text
 * - release_country: plain text
 * - release_date: plain text (use format_date() if necessary)
 * - release_credits: HTML markup string
 * - release_notes: HTML markup string
 * - release_images: array of URL's to images on provider's site:
 *   - image_urls: array of index => URL
 *   - primary: index of primary image URL (for types with one image per album)
 * - release_categories: array of plain textrelease categories (genres, styles,
 *    etc). These may optionally be turned into taxonomy terms by the Entity
 *    Adapter.
 * - release_tracks [REQUIRED]: an assoicative array of track values. Each
 *   track should be a 0-indexed array, and each index should be an array with
 *   these fields:
 *   - track_position (track #) [REQUIRED]: plain text
 *     Note that this should be a value; you should NOT use the track position
 *     as the index.
 *   - track_title [REQUIRED]: plain text
 *   - track_duration: plain text (in MM:SS format)
 *   - track_artist: plain text
 *     It's a good idea to set this, even if the release is not a compilation,
 *     in case the user is importing tracks individually.
 *   - track_notes: HTML markup string
 *   - track_lyrics: plain text
 *   If the discography provider doesn't have a track listing for some odd
 *   reason, then this should be an empty array; don't leave it unset.
 *
 */
function discogs_prov_discog_fetch_release($id) {
  // Define and initialize variables
  $data = array();
  $json = array();
  $url  = 'http://api.discogs.com/releases/' . $id;

  // Send the API request via HTTP using helper function
  $json = _discogs_prov_http_request($url);

  // Set up the $data array's required fields, so that if the JSON object
  // didn't return usable values, at least required fields won't be unset
  $data = array(
    'title'          => '',
    'release_artist' => '',
    'release_tracks' => array(),
  );
  // Parse JSON data for the release
  if (isset($json['title'])) {
    $data['title'] = strip_tags($json['title']);
  }
  if (isset($json['artists'])) {
    $data['release_artist'] = _discogs_prov_to_str($json['artists']);
  }
  if (isset($json['labels'])) {
    $data['release_label'] = _discogs_prov_to_str($json['labels']);
  }
  if (isset($json['labels'])) {
    $data['release_catno'] = _discogs_prov_to_str($json['labels'], 'catno');
  }
  if (isset($json['formats'])) {
    $data['release_format'] = _discogs_prov_to_str($json['formats'],
        'name', ', ');
  }
  if (isset($json['country'])) {
    $data['release_country'] = $json['country'];
  }
  if (isset($json['released'])) {
    $data['release_date'] = $json['released'];
  }
  // Theme extra artists using custom theme function
  if (isset($json['extraartists'])) {
    if (is_array($json['extraartists'])) {
      $data['release_credits'] = theme('discogs_mult_artist',
          $json['extraartists']);
    }
  }
  if (isset($json['notes'])) {
    $data['release_notes'] = $json['notes'];
  }

  // Merge styles and genres into categories
  $data['release_categories'] = array();
  if (isset($json['styles'])) {
    $data['release_categories'] = $json['styles'];
  }
  if (isset($json['genres'])) {
    $data['release_categories'] = array_merge(
        (array) $data['release_categories'],
        (array) $json['genres']);
  }

  // Parse JSON data for tracks
  if (isset($json['tracklist'])) {
    foreach ($json['tracklist'] as $delta => $track) {
      if (isset($track['position'])) {
        $data['release_tracks'][$delta]['track_position'] = $track['position'];
      }
      else {
        // Required, so use $delta as track position
        $data['release_tracks'][$delta]['track_position'] = $delta;
      }
      if (isset($track['title'])) {
        // Should use check_plain(), but it screws up characters
        $data['release_tracks'][$delta]['track_title'] = $track['title'];
      }
      else {
        // Required - use empty string
        $data['release_tracks'][$delta]['track_title'] = '';
      }
      if (isset($track['duration'])) {
        $data['release_tracks'][$delta]['track_duration'] = $track['duration'];
      }
      if (isset($track['artists'])) {
        $data['release_tracks'][$delta]['track_artist']
            = _discogs_prov_to_str($track['artists'], 'name');
      }
      // Theme extra artists using custom theme function
      if (isset($track['extraartists'])) {
        $data['release_tracks'][$delta]['track_notes']
            = theme('discogs_mult_artist', $track['extraartists']);
      }
      // Discogs.com doesn't provide lyrics
      $data['release_tracks'][$delta]['lyrics'] = '';
    }
  }

  // Handle images with helper function
  if (isset($json['images'])) {
    $data['release_images'] = _discogs_prov_images($json['images']);
  }

  return $data;
}

/**
 * Helper function that actually performs the HTTP queries, and returns an
 * unaltered array formed by decoding the JSON that was returned.
 *
 * @param $base Base URI part of URL (scheme and path)
 * @param query Array of key/value query pairs, passed to http_build_query()
 */
function _discogs_prov_http_request($base, $query_data = array()) {
  $json_array = array();
  // Build the fully-qualified URL
  $url = $base;
  if (!empty($query_data)) {
    $url .= '?' . http_build_query($query_data);
  }
  // Discogs.com requires a descriptive user-agent
  $options = array(
    'User-Agent' => 'DiscogsProv/7.x-1.x +http://drupal.org/project/discogs',
  );
  $req = drupal_http_request($url, $options);
  if ($req->code == "200") {
    $json_str = $req->data;
    $json_array = drupal_json_decode($json_str);
  }
  else {
    // Hopefully this should never happen
    $msg = $url . t('returned') . ' ' . $req->code . ': ' . $req->error;
    drupal_set_message($msg, 'error');
  }
  return $json_array;
}

/**
 * This is a helper function that takes a JSON query, and returns an array that
 * has fields that are in common with both hook_discog_search() and
 * hook_fetch_releases(). Those functions can then add their own data to the
 * returned array.
 */
function _discogs_prov_common($json, $results = 'results') {
  // Initialize the returned data array, to guarantee fields are set.
  $data = array(
    'total_results' => 0,
    'results' => array(),
  );
  // Set total results
  if (isset($json['pagination']['items'])) {
    $data['total_results'] = $json['pagination']['items'];
  }
  // Build results sub-array
  if (isset($json[$results])) {
    foreach ($json[$results] as $delta => $result) {
      // Required by the Discography Mediator
      $data['results'][$delta]['title'] = $result['title'];
      $data['results'][$delta]['id']    = $result['id'];
      // Unfortunately, Discogs.com returns masters as releases, and their ID's
      // can't be used to fetch releases. Instead, we need the main release ID.
      if (isset($result['type'])) {
        if ($result['type'] == 'master') {
          $data['results'][$delta]['id'] = $result['main_release'];
        }
      }

      // Not required, but exist in most Discogs API queries
      if (isset($result['thumb'])) {
        $data['results'][$delta]['thumb_url'] = $result['thumb'];
      }
      if(isset($result['uri'])) {
        $data['results'][$delta]['provider_url'] = 'http://www.discogs.com'
          . $result['uri'];
      }

      // Returned from release query
      if (isset($result['artist'])) {
        $data['results'][$delta]['release_artist'] = $result['artist'];
      }
      if (isset($result['format'])) {
        if (is_array($result['format'])) {
          $data['results'][$delta]['release_format']
              = implode(', ', $result['format']);
        }
        else {
          $data['results'][$delta]['release_format'] = $result['format'];
        }
      }
      if (isset($result['label'])) {
        if (is_array($result['label'])) {
          $data['results'][$delta]['release_label']
              = implode('/', array_unique($result['label']));
        }
        else {
          $data['results'][$delta]['release_label']
              = theme('discogs_check_name', array('name' => $result['label']));
        }
      }
      if (isset($result['catno'])) {
        $data['results'][$delta]['release_catno'] = $result['catno'];
      }
    }
  }
  return $data;
}

/**
 * Helper function for cleaning up an array of string information returned from
 * the Discogs.com API.
 */
function _discogs_prov_to_str($strings, $key = 'name', $join = '/') {
  if (empty($strings)) {
    return '';
  }
  $cleaned = array();
  $ret = '';
  if (is_array($strings)) {
    // Get the names and clean them using theme hook
    foreach($strings as $string) {
      if (isset($string[$key])) {
        if (is_string($string[$key])) {
          $cleaned[] = theme('discogs_check_name', array('name' => $string[$key]));
        }
      }
    }
    // Implode into a single string
    $ret = implode($join, $cleaned);
  }
  else {
    // Use theme hook to format a single string
    $ret = theme('discogs_check_name', array('name' => $strings));
  }
  return $ret;
}

/**
 * Helper function to handle images array from Discogs.com.
 */
function _discogs_prov_images($images) {
  // Sanity check
  if (!is_array($images)) {
    return array();
  }
  // Declare and initialize variables
  $img_arr = array();
  $primary = 0;

  foreach($images as $delta => $img) {
    // I don't know whether 'resource_url' or 'uri' is correct; they're the
    // same on every single release I've looked at
    if (isset($img['resource_url'])) {
      $img_arr[$delta] = $img['resource_url'];
    }
    else if (isset($img['uri'])) {
      $img_arr[$delta] = $img['uri'];
    }
    // See if this is the primary image
    if (isset($img['type'])) {
      if ($img['type'] == 'primary') {
        $primary = $delta;
      }
    }
  }
  // Return an array with image URL's and primary index
  return array(
    'primary'    => $primary,
    'image_urls' => $img_arr,
  );
}

/**
 * Theme hook to clean up an artist/label name, e.g. to turn "Beat, The (2)"
 * into "The Beat".
 */
function theme_discogs_check_name($vars) {
  if (empty($vars['name'])) {
    return '';
  }
  $name = $vars['name'];
  // Take "The" from end, put it in front
  if (stripos($name, ', The') > 0) {
    $name = 'The ' . $name;
    $name = str_replace(', The', '', $name);
  }
  // Remove duplication suffix (e.g. "(2)" from "Cream (2)")
  $name = preg_replace('/\([0-9]\)/', '', $name);
  $name = trim($name);
  return check_plain($name);
}

/**
 * Custom theme function for formatting Discogs 'extraartist' array of artist
 * names and roles.
 *
 * The parameter is passed directly from the converted array returned from the
 * call to the Discogs API. These keys are usually set:
 * - id
 * - name
 * - role
 * - tracks
 * - join
 * - anv
 * - resource_url
 *
 * However, it is rare that the 'anv', 'join', or 'tracks' values contain data.
 *
 * @param $extraartists
 *   The extra artists array (either per track or per release).
 * @return
 *   HTML markup string with themed artists and roles
 */
function theme_discogs_mult_artist($extraartists) {
  // Convert $extraartists[]['name'] and $extraartists[]['role'] to $credits
  $credits = '';
  if (is_array($extraartists)) {
    foreach ($extraartists as $artist) {
      // Create credit string
      if (isset($artist['name'])) {
        $name = theme('discogs_check_name', array('name' =>$artist['name']));
        $role = check_plain($artist['role']);
        $credits .= theme('html_tag', array(
          'element' => array(
            '#tag' => 'div',
            '#attributes' => array('class' => 'discog-credits'),
          '#value' => $role . ': ' . $name,
          )
        ));
        $credits .= "\n";
      }
    }
  }
  return $credits;
}