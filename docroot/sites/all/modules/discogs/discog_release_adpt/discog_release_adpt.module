<?php
/**
 * @file:
 * This module implements the Discography Entity Adapter for the Discography
 * Release content type.
 */

/**
 * Implements hook_help().
 */
function discog_release_adpt_help($path, $arg) {
  switch ($path) {
    case 'admin/help#discog_release_adpt':
      return '<h3>' . t('About') . '</h3>'
        . '<p>'  . t('This module is the Discography Entity Adapter for the Release content type. Its job is to take release data from the Discography Mediator, and save it as Release content.') . '</p>'
        . '<p>'  . t('For more information, see the <a href="!url">online documentation</a> for the Discography Framework.', array('!url' => 'https://drupal.org/node/2031953')) . '</p>'
        . '<h3>' . t('Uses') . '</h3>'
        . '<p>'  . t('This module implements hooks that are called by the Discography Mediator. Visit the <a href="@link">help page for the Discography Mediator</a> for details.', array('@link' => url('admin/help/discog_mediator')))
        . '</p>';
  }
}

/**
 * Implements hook_discog_type_info().
 *
 * @return array of information. Array must have this structure:
 * - name [REQUIRED]: short, human-readable name of the entity or node type.
 * - description: brief description of the entity or node type.
 *
 */
function discog_release_adpt_discog_type_info() {
	return array(
	 'name' => t('Discography Release'),
	 'description' => t('The Discography Release content type.'),
  );
}

/**
 * Implements hook_discog_save_release().
 *
 * @param $release Array of release data.
 * The $release array should have fields with the following keys:
 * - title [REQUIRED]: plain text (named for consistency with node title)
 * - release_artist [REQUIRED]: plain text
 * - release_label: plain text
 * - release_catno (catalog #): plain text
 * - release_format: plain text
 * - release_country: plain text
 * - release_date: plain text (use format_date() if necessary)
 * - release_credits: HTML markup string
 * - release_notes: HTML markup string
 * - release_images: array of URL's to images on provider's site:
 *   - image_urls: array of index => URL
 *   - primary: index of primary image URL (for types with one image per album)
 * - release_categories: array of plain textrelease categories (genres, styles,
 *    etc). These may optionally be turned into taxonomy terms by the Entity
 *    Adapter.
 * - release_tracks [REQUIRED]: an associative array of track values. Each track
 *   should be a 0-indexed array, and each index should be an array with these
 *   fields:
 *   - track_position (track #) [REQUIRED]: plain text
 *     Note that this should be a field; you should NOT use the key as the
 *     track position.
 *   - track_title [REQUIRED]: plain text
 *   - track_duration: plain text (in MM:SS format)
 *   - track_artist: plain text
 *   - track_notes: HTML markup string
 *   - track_lyrics: plain text
 *
 * @return Array containing information about the creation process.
 * The array should have these fields:
 * - success [REQUIRED]: boolean
 * - message: Success/failure message, e.g. "Release was created successfully"
 * - nid: The ID of the inserted node (or other entity)
 */
function discog_release_adpt_discog_save_release($release) {
  // Define and initialize variables
  $ok      = FALSE;
  $message = '';
  $title   = '';
  $values  = array();
  $lang    = LANGUAGE_NONE;
  $format  = NULL;

  // We need to include node.pages.inc to have access to node hooks
  module_load_include('inc', 'node', 'node.pages');

  // Convert $release data to something we can put into $form_state['values']
  foreach ($release as $key => $value) {
    switch ($key) {
      case 'title':
        // Unlike other fields, node title is singular and doesn't have lang
        $values['title'] = check_plain($value);
        break;
      case 'release_categories':
        // Save as taxonomy terms
        $genres = _discog_release_adpt_genres($value);
        if (!empty($genres)) {
          $values['release_genres'][$lang] = $genres;
        }
        break;
      case 'release_images':
        $file = _discog_release_adpt_images($value);
        if (!empty($file)) {
          $values['release_image'][$lang][0] = $file;
        }
        break;
      case 'release_tracks':
        $values[$key][$lang] = $value;
        break;
      case 'release_notes':
      case 'release_credits':
        // Put values into the node according to available filter
        if (_discog_release_adpt_html_avail($key)) {
          $values[$key][$lang][0]['value']  = $value;
          $values[$key][$lang][0]['format'] = 'filtered_html';
        }
        else {
          $values[$key][$lang][0]['value'] = strip_tags($value);
        }
        break;
      default:
        $values[$key][$lang][0]['value'] = check_plain(strip_tags($value));
    }
  }
  // Save meta-info
  $values['language'] = $lang;
  $values['op']       = t('Save');

  // Create a node out of the values, prepare and save it
  $node = (object) $values;
  $node->type = 'release';
  node_object_prepare($node);
  node_save($node);

  // See if there were any errors, and if so, set $ok and $message
  if ($node->nid) {
    $ok = TRUE;
    $message = t('Release "@title" was created successfully.',
        array('@title' => $values['title']));
  }
  else {
    $message = t('Discography Release Adapter error importing "@title".',
        array('@title' => $values['title']));
  }

  return array(
    'success' => $ok,
    'message' => $message,
    'nid'     => $node->nid,
  );
}

/**
 * Helper function to handle categories. The categories are turned into
 * taxonomy terms and saved with the node.
 *
 * @return Array of taxonomy information to insert into the node. If there
 * was a problem saving the taxonomy terms, or if the taxonomy module is not
 * enabled, an empty array is returned.
 */
function _discog_release_adpt_genres($categories) {
  if (!module_exists('taxonomy')) {
    return array();
  }
  // Define and initialize variables
  $term_ids  = array();
  $terms     = array();
  $term      = '';

  foreach ($categories as $delta => $category) {
    // See if there is already a taxonomy term for this category
    $terms = taxonomy_get_term_by_name($category, 'discog_genres');
    if (!empty($terms)) {
      // Get the term
      $term = reset($terms);
    }
    else {
      // Create the term
      $term = (object) array(
        'vid' => variable_get('discog_genres_vid', 0),
        'name' => $category,
        'vocabulary_machine_name' => 'discog_genres',
      );
      if (!taxonomy_term_save($term)) {
        drupal_set_message(t('Error saving term @term',
            array('@term' => $term)), 'error');
        continue;
      }
    }
    // Add the term ID to the list
    $term_ids[$delta]['tid'] = $term->tid;
    // Add the actual taxonomy object to the list
  }
  // Return term ID's to $form_state
  return $term_ids;
}

/**
 * Helper function to handle images
 *
 * @return Array representing a file object. If there was a problem retreiving
 * or saving the file, or if the image module is not enabled, an empty array is
 * returned.
 */
function _discog_release_adpt_images($data) {
  if (!module_exists('image')) {
    return array();
  }
  if (empty($data['primary'])) {
    $primary = 0;
  }
  else {
    $primary = $data['primary'];
  }
  $url      = $data['image_urls'][$primary];
  $filename = basename($url);
  $image    = file_get_contents($url);
  if ($image) {
    $file = file_save_data($image, 'public://' . $filename,
        FILE_EXISTS_REPLACE);
     return (array) $file;
  }
  // If image failed, return blank array
  return array();
}

/**
 * Helper function to determine if the filtered_html filter is availabe for a
 * particular field.
 */
function _discog_release_adpt_html_avail($field_name) {
  // Declare and initialize variables
  $format   = NULL;
  $instance = NULL;

  // Find out if the filter is available for the current user
  $format = filter_format_load('filtered_html');
  if (!filter_access($format)) {
    return FALSE;
  }
  // Find out if the filter is available on the field
  $instance = field_info_instance('node', $field_name, 'release');
  if (empty($instance['settings']['text_processing'])) {
    return FALSE;
  }
  return $instance['settings']['text_processing'] == 1;
}
