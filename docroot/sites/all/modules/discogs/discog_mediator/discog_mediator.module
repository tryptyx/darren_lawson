<?php
/**
 * @file
 * This module acts as a mediator between Discography Provider Adapters and
 * Discography Entity Adapters. This means that other module authors can
 * implement hooks to do one of two things:
 *
 * 1. Import information into their own content type by writing their own
 * Discography Entity Adapter module
 * 2. Implement an interface to a third-party API that provides discography
 * information, by writing their own Discography Provider Adapter
 *
 * This module will do nothing unless at least one of each module type is
 * installed and activated. One of each type of module is included in the
 * Discography framework.
 *
 * The primary job of this module is to provide and handle a multistep form
 * that acts as the UI to import releases. It also provides a menu path, creates
 * permissions, and provides a default theme override to format the list items
 * used in the form.
 */

/**
 * Implements hook_menu().
 */
function discog_mediator_menu() {
  $items = array();
  $items['node/add/discog-import'] = array(
    'title' => 'Discography import',
    'description' => 'Import releases from third-party discography providers.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('discog_mediator_import_form'),
    'access arguments' => array('import discography'),
  );
  $items['admin/config/content/discog-import'] = array(
    'title' => 'Discography Mediator settings',
    'description' => 'Discography Mediator administration menu.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('discog_mediator_admin_settings'),
    'file' => 'discog_mediator.admin.inc',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function discog_mediator_permission() {
  return array(
    'import discography' =>array(
      'title' => t('Import from discography providers'),
      'description' => t('Allows site authors to import discography information from third-party providers.'),
    ),
  );
}

/**
 * Implements hook_help.
 */
function discog_mediator_help($path, $arg) {
  switch ($path) {
    case 'admin/help#discog_mediator':
      // Deliberate fallthrough
    // case 'admin/help/discog-mediator':
      return '<h3>' . t('About') . '</h3>'
        . '<p>'  . t('The Discography Mediator is the glue that binds together the Discography Framework. It routes requests  between the users, the Provider Adapter, and the Entity Adapter. It is the  Mediator that invokes the hooks that the Adapters implement.') . '</p>'
        . '<p>'  . t('Specifically, the mediator has these tasks:') . '</p>'
        . '<ul>'
        . '<li>' . t('Handle form wizards and user interaction') . '</li>'
        . '<li>' . t('Route search requests from the user to the Provider Adapter') . '</li>'
        . '<li>' . t('Display search results returned by the Provider Adapter') . '</li>'
        . '<li>' . t('Route import requests from the user to the Entity Adapter') . '</li>'
        . '<li>' . t('Use the Batch API to import multiple releases at a time') . '</li>'
        . '</ul>'
        . '<p>'  . t('Because all of this is done in the provided Discography Mediator, other  module developers do not have to worry about it. They can create their own  Provider Adapter or Entity Adapter simply by implementing a couple of  hooks.') . '</p>'
        . '<p>'  . t('For more information, see the <a href="!url">online documentation</a> for the Discography Framework.', array('!url' => 'https://drupal.org/node/2031953')) . '</p>'
        . '<h3>' . t('Uses') . '</h3>'
        . '<p>'  . t('The Discography Mediator cannot be used without a Provider Adapter and an Entity Adapter. At least one of each must be installed. If more than one is installed, you will be asked to select one.')
        . ' '    . t('Go to the !link page to enable Discography modules.', array('!link' => l(t('Modules'), 'admin/modules'))) . '</p>'
        . '<p>'  . t('Once installed, you can import releases just as if you were adding a content type, by going to the <a href="@link">Discography import</a> section.', array('@link' => url('node/add/discog-import'))) . '</p>'
        . '<p>'  . t('The Discography Import section is a form wizard that allows you to search for and import releases. Simply select a search term and type. If you are searching for an artist or label, select one to get release information for them. Finally, check off the releases to import. There will be a progress bar indicating the import status, and when it is finished, you will go back to the beginning of the wizard. You can cancel at any stage.') . '</p>'
        . '<h3>' . t('Creating Provider or Entity Adapters') . '</h3>'
        . '<p>'  . t('In order to use the Discography Framework with other API\'s besides Discogs.com, or other entities besides the Release Node, you will need to develop your own module that plugs in to the Discography Framework. This project is designed to make it as easy as possible to do so; all you need to do is to implement a small number of hooks.') . '</p>'
        . '<p>'  . t('For more information, see <a href="!url">Developing Modules for the Discography Framework</a> in the online documentation.', array('!url' => 'https://drupal.org/node/2031967'))
        . '</p>';
  }
}

/**
 * Impelements hook_theme().
 */
// function discog_mediator_theme($existing, $type, $theme, $path) {
function discog_mediator_theme() {
  return array(
    'discog_selections' => array(
      'variables' => array(
        'multiple' => FALSE,
        'results'  => array(),
      ),
      'function' => 'theme_discog_selections',
    ),
    'discog_info_text' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Themes the information text returned from the Provider, if any.
 */
function theme_discog_info_text($data) {
  // Define and initialize variables
  $str  = '';
  $name = '';

  // Artist/label/etc. name
  if (isset($data['name'])) {
    $name = check_plain(strip_tags($data['name']));
    $str .= theme('html_tag', array(
      'element' => array(
        '#tag' => 'h3',
        '#attributes' => array('class' => 'discog-info-name'),
      '#value' => $name,
      )
    ));
  }
  // Image
  if (isset($data['image_url'])) {
    // New hotness
    $str .= theme('image', array(
      'path'        => $data['image_url'],
      'alt'         => $name,
      'title'       => $name,
      'attributes' => array('class' => 'discog-info-image'),
    ));
  }
  // Description
  if (isset($data['description'])) {
    $str .= theme('html_tag', array(
      'element' => array(
        '#tag' => 'div',
        '#attributes' => array(
          'class' => 'discog-info-description',
        ),
      '#value' => check_markup($data['description']),
      )
    ));
  }
  // Provider URL: link to page on Discogs.com
  if (isset($data['provider_url'])) {
    $link_attr = array(
      'target' => '_blank',
      'class' => 'discog-info-link',
    );
    $str .= theme('html_tag', array(
      'element' => array(
        '#tag' => 'p',
        '#value' => l(t('View on external website'), $data['provider_url'],
          array('attributes' => $link_attr)),
      )
    ));
  }
  // Wrap it all in a div tag
  return theme('html_tag', array(
    'element' => array(
      '#tag' => 'div',
      '#attributes' => array('class' => array('discog-info', 'clearfix')),
      '#value' => $str,
    )
  ));
}

/**
 * This theme function takes discography results returned from a search, and
 * returns an array specifying how the results will be rendered.
 *
 * This implementation specifies that the results are to be themed using
 * theme_tableselect(). The table will have two columns: one for the thumbnail
 * image (on the left), and one with the remaining information, already
 * rendered as (very basic) HTML.
 *
 * @see theme_tableselect()
 */
function theme_discog_selections($variables) {
  // Retrieve variable data
  $multiple = $variables['multiple'];
  $results  = $variables['results'];

  // Specify table header
  $header = array(
    'thumb' => t('Thumbnail'),
    'info'  => t('Information'),
  );
  // Build the table options
  $options = array();
  foreach($results as $delta => $result) {
    // Define and initialize loop variables
    $title = '';
    $thumb = '';
    $info  = '';
    $label = '';

    // Get the title
    if (isset($result['title'])) {
      $title = check_plain(strip_tags($result['title']));
    }
    // Get ID; if there is none, skip this result
    if (empty($result['id'])) {
      continue;
    }
    $id = $result['id'];
    // Generate HTML for thumbnail
    if (!empty($result['thumb_url'])) {
      $thumb = theme('image', array(
        'path'       => $result['thumb_url'],
        'alt'        => $title,
        'title'      => $title,
        'attributes' => array('class' => 'discog-option-thumb'),
      ));
    }
    // Generate HTML for info:
    // Artist
    if (isset($result['release_artist'])) {
      $info .= theme('html_tag', array(
        'element' => array(
          '#tag' => 'span',
          '#attributes' => array('class' => 'discog-option-artist'),
          '#value' => check_plain(strip_tags($result['release_artist'])),
        )
      ));
      $info .= ' ';
    }
    // "Title" (could be album title or name of artist/label/etc.)
    $info .= theme('html_tag', array(
      'element' => array(
        '#tag'        => 'span',
        '#attributes' => array('class' => 'discog-option-title'),
        '#value'      => $title,
      )
    ));
    // Format
    if (isset($result['release_format'])) {
      $info .= ' ';
      $info .= theme('html_tag', array(
        'element' => array(
          '#tag'        => 'span',
          '#attributes' => array('class' => 'discog-option-format'),
          '#value'      => '('
              . check_plain(strip_tags($result['release_format'])) . ')',
        )
      ));
    }
    // Record label
    if (isset($result['release_label'])) {
      $label = theme('html_tag', array(
        'element' => array(
          '#tag'        => 'span',
          '#attributes' => array('class' => 'discog-option-label'),
          '#value'      => check_plain(strip_tags($result['release_label'])),
        )
      ));
    }
    // Catalog number
    if (isset($result['release_catno'])) {
      $label .= theme('html_tag', array(
        'element' => array(
          '#tag'        => 'span',
          '#attributes' => array('class' => 'discog-option-catno'),
          '#value'      => check_plain(strip_tags($result['release_catno'])),
        )
      ));
    }
    // Wrap label & catalog number in div container
    if (isset($result['release_label'])) {
      $info .= theme('html_tag', array(
        'element' => array(
          '#tag'        => 'div',
          '#attributes' => array('class' => 'discog-option-label-container'),
          '#value'      => $label,
        )
      ));
    }
    // Provider URL: link to page on Discogs.com
    if (isset($result['provider_url'])) {
      $info .= theme('html_tag', array(
        'element' => array(
          '#tag'   => 'div',
          '#value' => l(t('View on external website'), $result['provider_url'],
            array('attributes' => array('target' => '_blank'))),
        )
      ));
    }
    // Finally, put it all into the options array
    $options[$id] = array(
      'thumb'       => $thumb,
      'info'        => $info,
      '#attributes' => array('class' => array('discog-option-row')),
    );
  }

  // Return the theme_tableselect() array
  return array(
    '#type' => 'tableselect',
    '#header'   => $header,
    '#options'  => $options,
    '#multiple' => $multiple,
    '#empty'    => t('No results.'),
  );
}

/**
 * Menu callback. Handles the import process by returning a form depending upon
 * which form step we're on.
 */
function discog_mediator_import_form($form, &$form_state) {
  // The functions require 'step' to be set, so set it here if it isn't
  if (!isset($form_state['storage']['step'])) {
    $form_state['storage']['step'] = 0;
  }
  $form_step = $form_state['storage']['step'];
  switch($form_step) {
    case 1: // Select non-release items, as radio
      $form = _discog_mediator_import_form_many($form_state, FALSE);
      break;
    case 2: // Select releases, as check boxes
      $form = _discog_mediator_import_form_many($form_state, TRUE);
      break;
    case 0:
      // Deliberate fallthrough; default = step 0
    default:
      $form = _discog_mediator_import_form_init($form_state);
  }
  // All forms should have a "cancel" button
  $form['actions']['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
  );
  return $form;
}

/**
 * Validate the form.
 */
function discog_mediator_import_form_validate($form, &$form_state) {
  // TODO More validation
  // If 'op' isn't set, this is an AJAX call - don't validate yet
  if (empty($form_state['values']['op'])) {
    return;
  }
  // If we're cancelling, don't validate
  if ($form_state['values']['op'] == t('Cancel')) {
    return;
  }
  // Get the form step
  if (!isset($form_state['storage']['step'])) {
    $form_state['storage']['step'] = 0;
  }
  $form_step = $form_state['storage']['step'];
  // The only thing that needs validation in this whole form is the initial
  // search query.
  if ($form_step == 0) {
    if (empty($form_state['values']['search_term'])) {
      form_set_error('search_term', t('Search term cannot be empty.'));
    }
  }
}

/**
 * Handle post-validation form submission.
 */
function discog_mediator_import_form_submit($form, &$form_state) {
  // Define and initialize variables
  $handle_step = 0;
  $prev        = 0;
  $next        = 1;
  $more        = FALSE;
  $per_page    = variable_get('discog_results_per_page', 20);
  $offset      = 0;
  $provider    = '';
  $entity      = '';
  $term        = '';
  $type        = '';
  $filter      = '';
  $data        = '';

  // Trigger multistep by telling Forms API to rebuild
  $form_state['rebuild'] = TRUE;

  // Get data from storage, if it's there
  if (isset($form_state['storage']['step'])) {
    $handle_step = $form_state['storage']['step'];
  }
  if (isset($form_state['storage']['prev'])) {
    $prev = $form_state['storage']['prev'];
  }
  if (isset($form_state['storage']['offset'])) {
    $offset = $form_state['storage']['offset'];
  }
  if(isset($form_state['storage']['provider_module'])) {
    $provider = $form_state['storage']['provider_module'];
  }
  if(isset($form_state['storage']['entity_module'])) {
    $entity = $form_state['storage']['entity_module'];
  }
  if(isset($form_state['storage']['search_term'])) {
    $term = $form_state['storage']['search_term'];
  }
  if(isset($form_state['storage']['search_type'])) {
    $type = $form_state['storage']['search_type'];
  }
  if(isset($form_state['storage']['search_filter'])) {
    $filter = $form_state['storage']['search_filter'];
  }
  if(isset($form_state['storage']['search_id'])) {
    $id = $form_state['storage']['search_id'];
  }

  // Handle the "Cancel" button
  if ($form_state['values']['op'] == t('Cancel')) {
    _discog_mediator_import_form_cancel($form_state);
    return;
  }
  // Handle the "More" button
  else if ($form_state['values']['op'] == t('More')) {
    // Handle previous form step, but with an increased offset
    $handle_step = $prev;
    $offset += $per_page;
    $more = TRUE;
  }
  // Handle the "Submit" button
  else {
    // Handle case where we're submitting after "More" button pressed
    $offset = 0;
  }

  // Each form step gets the submitted form values, then calls an adapter hook
  // that returns data
  switch ($handle_step) {
    case 0: // Submitted an initial search request
      $id = 0;
      // Get the provider info ASAP
      if (isset($form_state['values']['provider_module'])) {
        $provider = $form_state['values']['provider_module'];
      }
      $pinfo = module_invoke($provider, 'discog_provider_info');
      if (isset($form_state['values']['entity_module'])) {
        $entity = $form_state['values']['entity_module'];
      }
      if (isset($form_state['values']['search_term'])) {
        $term = $form_state['values']['search_term'];
      }
      if (isset($form_state['values']['search_type'])) {
        $type = $form_state['values']['search_type'];
      }
      if (isset($form_state['values']['search_filter'])) {
        $filter = $form_state['values']['search_filter'];
      }
      // If not set, use default filter
      else if (!empty($pinfo['search_filters']) // All of this is necessary
          && !empty($pinfo['default_filter'])   // to prevent PHP warnings.
          && !empty($pinfo['search_filters'][$pinfo['default_filter']])) {
        $filter = $pinfo['search_filters'][$pinfo['default_filter']];
      }
      $data = module_invoke($provider, 'discog_search', $term, $type, $filter,
          $per_page, $offset);
      // If this search type returns releases, skip the next step
      if (!$more && !empty($pinfo['returns_releases'])) {
        if (in_array($type, $pinfo['returns_releases'])) {
          $next = 2;
        }
      }
      break;

    case 1: // Submitted artist, label, etc. to query for releases
      if (!$more && isset($form_state['values']['data'])) {
        if (!is_array($form_state['values']['data'])) {
          $id = $form_state['values']['data'];
        }
      }
      $data = module_invoke($provider, 'discog_fetch_releases', $type, $id,
          $per_page, $offset);
      break;

    case 2: // Submitted a list of releases to import
      $ids = array_filter($form_state['values']['data']);
      // Start batch process
      $batch = _discog_mediator_batch_setup($ids, $provider, $entity);
      batch_set($batch);
      // After batch is done, cancel and return
      _discog_mediator_import_form_cancel($form_state);
      return;

    default: // This should never happen
      drupal_set_message(t('Illegal form state'), 'error');
  }
  // Store info in $form_state
  $form_state['storage'] = array(
    'data'            => $data,
    'step'            => $handle_step + $next,
    'prev'            => $handle_step,
    'provider_module' => $provider,
    'entity_module'   => $entity,
    'search_term'     => $term,
    'search_type'     => $type,
    'search_filter'   => $filter,
    'search_id'       => $id,
    'offset'          => $offset,
  );
}

/**
 * Helper function to cancel the form and return to the first form step.
 */
function _discog_mediator_import_form_cancel(&$form_state) {
  // If we're on step zero, "Cancel" should redirect to front page
  if (empty($form_state['storage']['step'])) {
    drupal_goto('<front>');
  }
  // Clear the form data
  $form_state['storage'] = array();
  $form_state['values']  = array();
}

/**
 * Helper function to generate Step 0 (initial step) of the form.
 *
 * @param $form_state The form state.
 */
function _discog_mediator_import_form_init(&$form_state) {
  // Define and initialize variables
  $form          = array();
  $providers     = array();
  $provider_opts = array();
  $prov_mod      = '';
  $entities      = array();
  $entity_opts   = array();
  $entity_mod    = '';
  $search_type   = '';
  $search_opts   = array();
  $filt_opts     = array();
  $err           = FALSE;
  $err_msgs      = array();
  $mod_msg       = t('Go to the !link page to enable Discography modules.',
    array('!link' => l(t('Modules'), 'admin/modules')));

  // Get modules that implement the Provider and Entity adapters
  if (_discog_mediator_get_adpt_info('discog_provider_info', $prov_mod,
       $providers, $provider_opts)) {
    $err = TRUE;
  }
  if(_discog_mediator_get_adpt_info('discog_type_info', $entity_mod, $entities,
      $entity_opts)) {
    $err = TRUE;
  }

  // Make sure one of each adapter is installed and enabled
  if(empty($providers)) {
    $err_msgs[] = t('You must have a Discography Provider Adapter enabled.');
    $err = TRUE;
  }
  if(empty($entities)) {
    $err_msgs[] = t('You must have a Discography Entity Adapter enabled.');
    $err = TRUE;
  }

  // $form_state['values'] array possibly set by AJAX call
  $values = array(
    'provider_module' => '',
    'entity_module'   => '',
    'search_type'     => '',
  );
  if(isset($form_state['values'])) {
    $values = $form_state['values'];
  }
  if(!empty($values['provider_module'])) {
    $prov_mod = $values['provider_module'];
  }
  if(!empty($values['entity_module'])) {
    $entity_mod = $values['entity_module'];
  }

  // Get the Search Type
  if(isset($providers[$prov_mod]['search_types'])) {
    $search_opts =  $providers[$prov_mod]['search_types'];
  }
  if(!empty($values['search_type'])) {
    $search_type = $values['search_type'];
  }
  else if (!empty($search_opts)) {
    reset($search_opts);
    $search_type = key($search_opts);
  }

  // Get the filters for this search type
  if(!empty($providers[$prov_mod]['search_filters'][$search_type])) {
    $filt_opts =  $providers[$prov_mod]['search_filters'][$search_type];
  }

  // Create the form array
  $form['search_term'] = array(
    '#type' => 'textfield',
    '#title' => t('Search'),
    '#description' => t('Enter your keywords'), // Same as search.module
    '#weight' => -4,
    // Setting this to TRUE means we can't cancel!
    // '#required' => TRUE,
  );

  // Put search type and filter (if any) in fieldset
  $form['search_opts'] = array(
    '#type' => 'fieldset',
    '#weight' => -3,
    '#prefix' => '<div id="search-opts">',
    '#suffix' => '</div>',
  );
  $form['search_opts']['search_type'] = array(
    '#type' => 'select',
    '#title' => t('Type'),
    '#description' => t('Type to search for'),
    '#options' => $search_opts,
    '#default_value' => $search_type,
    '#weight' => 1,
    // AJAX callback populates $form['search_type']
    // TODO Degrade gracefully when JavaScript disabled
    '#ajax' => array(
      'callback' => '_discog_mediator_ajax_search_opts',
      'wrapper' => 'search-opts',
      'method' => 'replace',
      'effect' => 'none',
    ),
  );
  $form['search_opts']['search_filter'] = array(
    '#type' => 'select',
    '#title' => t('Filter by...'),
    '#description' => t('Filter search results using these terms'),
    '#options' => $filt_opts,
    '#weight' => 2,
  );
  // Remove form element if filters are inactive
  if (empty($filt_opts)) {
    $form['search_opts']['search_filter'] = array();
  }

  // If there's only one Provider option, hide the form field
  if (count($provider_opts) < 2) {
    $form['search_opts']['provider_module'] = array(
      '#type' => 'hidden',
      '#default_value' => $prov_mod,
    );
  }
  // Otherwise, allow the user to select it
  else {
    $form['search_opts']['provider_module'] = array(
      '#type' => 'select',
      '#title' => t('Provider'),
      '#description' => t('Select the discography provider to query.'),
      '#options' => $provider_opts,
      '#default_value' => $provider_opts[$prov_mod],
      '#weight' => 3,
      // AJAX callback populates $form['search_type']
      // TODO Degrade gracefully when JavaScript disabled
      '#ajax' => array(
        'callback' => '_discog_mediator_ajax_search_opts',
        'wrapper' => 'search-opts',
        'method' => 'replace',
        'effect' => 'none',
      ),
    );
    // Show description if module provided one
    if (!empty($providers[$prov_mod]['description'])) {
      $form['search_opts']['provider_module']['#description']
          = $providers[$prov_mod]['description'];
    }
  }

  // If there's only one Entity option, hide the form field
  if (count($entity_opts) < 2) {
    $form['search_opts']['entity_module'] = array(
      '#type' => 'hidden',
      '#default_value' => $entity_mod,
    );
  }
  // Otherwise, allow the user to select it
  else {
    $form['search_opts']['entity_module'] = array(
      '#type' => 'select',
      '#title' => t('Content Type'),
      '#description' => t('Select the content type to hold discography information.'),
      '#options' => $entity_opts,
      '#default_value' => $entity_opts[$entity_mod],
      '#weight' => 5,
      // AJAX callback populates $form['search_type']
      // TODO Degrade gracefully when JavaScript disabled
      '#ajax' => array(
        'callback' => '_discog_mediator_ajax_search_opts',
        'wrapper' => 'search-opts',
        'method' => 'replace',
        'effect' => 'none',
      ),
    );
    // Show description if module provided one
    if (!empty($entities[$entity_mod]['description'])) {
      $form['search_opts']['entity_module']['#description']
        = $entities[$entity_mod]['description'];
    }
  }

  // Add the submit button
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search')
  );

  // If there's an error, return an "error form" - markup, no submit button
  // This is because at this form step, any errors are catastrophic
  if ($err) {
    $form = array();
    foreach ($err_msgs as $delta => $msg) {
      $markup = theme('html_tag', array(
        'element' => array(
          '#tag' => 'p',
          '#attributes' => array('class' => 'error'),
          '#value' => $msg,
        )
      ));
      $form['err_' . $delta] = array(
        '#markup' => $markup,
      );
    }
    $markup = theme('html_tag', array(
      'element' => array(
        '#tag' => 'p',
        '#value' => $mod_msg,
      )
    ));
    $form['err_mod'] = array(
      '#markup' => $markup,
    );
    drupal_set_message(t('Discography import error'), 'error');
  }
  return $form;
}

/**
 * Helper function to generate a form with many elements This form generator
 * will be used for Steps 1 and 2.
 *
 * @param form_state
 *  We do not pass $form_state by reference, because we are only building a
 *  renderable array. Any alterations to $form_state should be set in the
 *  submit handler.
 *
 * @param multiple
 *  Boolean representing whether the user should be able to select multiple
 *  options (that is, whether the options should be radios or checkboxes).
 */
function _discog_mediator_import_form_many($form_state, $multiple) {
  // Define and initialize variables
  $type          = $multiple ? 'checkboxes' : 'radios';
  $form          = array();
  $results       = array();
  $info          = array();
  $options       = array();
  $total_results = 0;
  $per_page      = variable_get('discog_results_per_page', 20);
  $offset        = 0;
  $start         = 0;
  $remaining     = 0;
  $showing       = 0;

  // Get the data return from the Discography Provider.
  if(isset($form_state['storage']['data']['total_results'])) {
    $total_results = $form_state['storage']['data']['total_results'];
  }
  if(isset($form_state['storage']['data']['results'])) {
    $results = $form_state['storage']['data']['results'];
  }
  if(isset($form_state['storage']['data']['info'])) {
    $info = $form_state['storage']['data']['info'];
  }

  // Get and calculate the pagination info
  if(isset($form_state['storage']['offset'])) {
    $offset = $form_state['storage']['offset'];
  }
  $showing = count($results);
  $remaining = $total_results - ($showing + $offset);
  $remaining = ($remaining > 0 ? $remaining : 0);
  if ($total_results > 0) {
    $start = $offset > 0 ? $offset : 1;
  }

  // Title
  $markup = theme('html_tag', array(
    'element' => array(
      '#tag' => 'h3',
      '#value' => t('Results'),
    )
  ));
  $form['title'] = array(
    '#markup' => $markup,
  );

  // Provider may have returned info; if so, theme and display
  if (!empty($info)) {
    $info_text = theme('discog_info_text', $info);
    $form['info'] = array(
      '#markup' => $info_text,
    );
  }

  // Pagination Info
  $markup = theme('html_tag', array(
    'element' => array(
      '#tag' => 'p',
      '#attributes' => array('class' => 'ok'),
      '#value' => t('Showing @start to @end out of @total results', array(
        '@start' => $start,
        '@end'   => $offset + $showing,
        '@total' => $total_results,
      )),
    )
  ));
  $form['pagination_info'] = array(
    '#markup' => $markup,
  );

  // Call theme function to put results into form data
  $form['data'] = theme('discog_selections', array(
    'multiple' => $multiple,
    'results'  => $results,
  ));

  // Submit button
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Next')
  );
  // Pagination button
  $form['actions']['more'] = array(
    '#type' => $remaining > 0 ? 'submit' : 'hidden',
    '#value' => t('More'),
  );
  return $form;
}

/**
 * Helper function to get module information from a Provider Adapter or Entity
 * Adapter.
 *
 * @return TRUE if there was an error, FALSE otherwise.
 */
function _discog_mediator_get_adpt_info($hook, &$mod, &$adpts, &$opts) {
  $err = FALSE;
  // Get modules that implement the Provider and Entity adapters
  foreach (module_implements($hook) as $module) {
    // Initially set the mod to the first one
    $mod = ($mod == '' ? $module : $mod);
    $adpts[$module] = module_invoke($module, $hook);
    if (isset($adpts[$module]['name'])) {
      $opts[$module] = $adpts[$module]['name'];
    }
    else {
      $err_msgs[] = t('Error in Provider Adapter module: @mod',
          array('@mod' => $module));
      $err = TRUE;
    }
  }
  return $err;
}

/**
 * AJAX callback to populate the search options fieldset.
 */
function _discog_mediator_ajax_search_opts($form, $form_state) {
  return $form['search_opts'];
}

/**
 * Helper function to set up batch processing.
 */
function _discog_mediator_batch_setup($ids, $provider, $entity) {
  $operations = array();
  foreach($ids as $id) {
    // Create the array of arguments
    $args = array($id, $provider, $entity);
    $operations[] = array('_discog_mediator_batch_process', $args);
  }
  $batch = array(
    'operations'       => $operations,
    'finished'         => '_discog_mediator_batch_finished',
    'title'            => t('Importing...'),
    'init_message'     => t('Importing first release.'),
    'progress_message' => t('Importing @current out of @total releases.'),
    'error_message'    => t('Error importing releases.'),
  );
  return $batch;
}

/**
 * Helper function to execute a batch process. In this case, the process is to
 * query the Discography Provider Adapter to fetch a release, then pass the
 * result to the Discography Entity Adapter to save it as a content type.
 */
function _discog_mediator_batch_process($id, $provider, $entity, &$context) {
  // Declare and initialize variables
  $msg     = '';
  $release = array();
  $result  = FALSE;
  $title   = '';

  // Invoke the provider hook to get the release data
  $release = module_invoke($provider, 'discog_fetch_release', $id);
  // Now invoke the entity adapter hook to save the release data
  $result  = module_invoke($entity, 'discog_save_release', $release);
  // Get the title
  if (!empty($release['title'])) {
    $title = $release['title'];
  }
  // Keep a record of success/failure
  if ($result['success'] || $result === TRUE) {
    if (isset($result['message'])) {
      $msg = $result['message'];
    }
    else {
      $msg = t('"@release" imported.', array('@release' => $title));
    }
  }
  else {
    if (isset($result['message'])) {
      $msg = $result['message'];
    }
    else {
      $msg = t('There was a problem importing "@release".',
          array('@release' => $title));
    }
  }
  // Keep data in context for Batch API
  $context['results'][] = $id . ': ' . $title;
  $context['message']   = $msg;
}

/**
 * Callback function to handle the end of batch requests.
 */
function _discog_mediator_batch_finished($success, $results, $operations) {
  $msg = '';
  if ($success) {
    $msg = t('All releases imported successfully.');
    drupal_set_message($msg);
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $msg = t(
      'An error occurred while processing @operation with arguments: @args',
      array(
          '@operation' => $error_operation[0],
          '@args'      => print_r($error_operation[0], TRUE)
      )
    );
    drupal_set_message($msg, 'error');
  }
}
